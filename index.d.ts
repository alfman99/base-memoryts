/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export class ExternalObject<T> {
  readonly '': {
    readonly '': unique symbol
    [K: symbol]: T
  }
}
export function setProtection(
  processHandle: ExternalObject<unknown>,
  address: number,
  size: number,
  protection: number,
): number
export function readBuffer(processHandle: ExternalObject<unknown>, address: number, size: number): Buffer
export function writeBuffer(processHandle: ExternalObject<unknown>, address: number, buffer: Buffer): void
export function patternScan(
  processHandle: ExternalObject<HANDLE>,
  pattern: string,
  fromAddr: number,
  toAddr: number,
): number
export function listModules(processPid: number): Array<Jsmoduleentry32>
export function getModuleEntry32(processName: string, moduleName: string): Jsmoduleentry32
export function getModuleHandle(processName: string, moduleName: string): ExternalObject<HMODULE>
export function getModuleInformation(
  processHandle: ExternalObject<HANDLE>,
  moduleHandle: ExternalObject<HMODULE>,
): Jslpmoduleinfo
export function listAllRunningProcesses(): Array<Jsprocessentry32>
export function openProcessPid(processPid: number): ExternalObject<unknown>
export function openProcessName(processName: string): ExternalObject<unknown>
export function getProcessPid(processName: string): number
export function closeProcess(processHandle: ExternalObject<unknown>): void
export function isElevatedProcess(): boolean
export function is64BitProcess(): boolean
export type JSMODULEENTRY32 = Jsmoduleentry32
export class Jsmoduleentry32 {
  dwSize: number
  th32ModuleId: number
  th32ProcessId: number
  glblcntUsage: number
  proccntUsage: number
  modBaseAddr: number
  modBaseSize: number
  szModule: string
  szExePath: string
  get moduleHandle(): ExternalObject<HMODULE>
}
export type JSLPMODULEINFO = Jslpmoduleinfo
export class Jslpmoduleinfo {
  baseOfDll: number
  sizeOfImage: number
  entryPoint: number
  constructor(baseOfDll: number, sizeOfImage: number, entryPoint: number)
}
export type JSPROCESSENTRY32 = Jsprocessentry32
export class Jsprocessentry32 {
  dwSize: number
  cntUsage: number
  th32ProcessId: number
  th32DefaultHeapId: number
  th32ModuleId: number
  cntThreads: number
  th32ParentProcessId: number
  pcPriClassBase: number
  dwFlags: number
  szExeFile: string
  constructor(
    dwSize: number,
    cntUsage: number,
    th32ProcessId: number,
    th32DefaultHeapId: number,
    th32ModuleId: number,
    cntThreads: number,
    th32ParentProcessId: number,
    pcPriClassBase: number,
    dwFlags: number,
    szExeFile: string,
  )
}
